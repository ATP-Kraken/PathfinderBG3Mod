local __util = require 'larian.util'
--Conditions for Baldur's Path

-- Passive PF2_Movement
function AutoStride()
	return ~HasStatus('MANUAL_STRIDE') & HasActionResource('ActionPoint', 1 , 0, false, false)
end

-- Status BOOST: Movement (todo: refactor movement statuses to use these)
function DashSpell()
	return SpellId('Shout_Dash')
end

function DisengageSpell()
	return SpellId('Shout_Disengage')
end

function HasDashStatus(entity)
    entity = entity or context.Source
	return HasStatus('DASH', entity ) | HasStatus('DASH_STACKED', entity ) | HasStatus('DASH_STACKED_2', entity )
end

function IsAnyActionStatusEvent()
	return IsStatusEvent(StatusEvent.OnAttack) | IsStatusEvent(StatusEvent.OnSpellCast)
end

function HasMindSanctuary(entity)
    entity = entity or context.Source
	return HasStatus('MF_MIND_SANCTUARY', entity) | HasStatus('TAD_MIND_SANCTUARY', entity) | HasPassive('TAD_MindSanctuary', entity)
end

function DashClearsMove(entity)
    entity = entity or context.Source
	return ~HasActionResource('Movement', 1 , 0, false, false, entity) | (~HasMindSanctuary(entity) & ~HasDashStatus(entity) & ~HasStatus('AUTO_STRIDE_MOVE',entity))
end

--Helps the AI remember it has movement
function DontClearAIMove()
	return ~Player() & HasActionResource('Movement', 100 , 0, true, false)
end

--Level scaling
function TrainedWeapon() --Proficient
	return IsProficientWith(context.Source, GetAttackWeapon(context.Source))
end

function TrainedArmor() --Proficient or unarmored
	if ~WearingArmor(context.Source) then
		return ConditionResult(true)
	end

	--Armor test from Community Library
	local armor = GetActiveArmor(context.Source)
	
    local hasLightArmor = armor.ArmorType == ArmorType.Padded 
    | armor.ArmorType == ArmorType.Leather 
    | armor.ArmorType == ArmorType.StuddedLeather
	
	local hasMediumArmor = armor.ArmorType == ArmorType.Hide 
    | armor.ArmorType == ArmorType.ChainShirt 
    | armor.ArmorType == ArmorType.ScaleMail 
    | armor.ArmorType == ArmorType.BreastPlate
    | armor.ArmorType == ArmorType.HalfPlate 

	return HasProficiency('HeavyArmor',context.Source) or (HasProficiency('LightArmor',context.Source) and hasLightArmor) or (HasProficiency('MediumArmor',context.Source) and hasMediumArmor)
end

function TrainedSkill() --Proficient
	return HasProficiencyBonus(context.CheckedAbility,context.CheckedSkill,context.Source)
end

-- Status MAP_X_ATTACKS

--Not functional for Stats.
function CalculateMAP()
	local MAP = -5
	if AgileMAP() then
		MAP = -4
	end
	return MAP
end

function AgileMAP()
	return HasWeaponProperty(WeaponProperties.Light, context.AttackWeapon) or IsMeleeUnarmedAttack()
end

-- Interrupt CritThreshold

function CritThresholdSuccess()
    local notCrit = context.InterruptedRoll.NaturalRoll < 20 and context.InterruptedRoll.NaturalRoll > 1
	local critDC = context.InterruptedRoll.Difficulty + 10
    local exceededBy10 = context.InterruptedRoll.Total >= critDC

    return ConditionResult(notCrit and exceededBy10)
end

function CritThresholdFail()
    local notCrit = context.InterruptedRoll.NaturalRoll < 20 and context.InterruptedRoll.NaturalRoll > 1
	local critTotal = context.InterruptedRoll.Total + 10
    local failedBy10 = critTotal <= context.InterruptedRoll.Difficulty

    return ConditionResult(notCrit and failedBy10)
end

-- Weapons

function WeaponDieSizeNum(num)
    --local weaponEntity = GetActiveWeapon(entity, true)
	--if IsWeaponOfProficiencyGroup('Clubs|Quarterstaffs',weaponEntity) then
	--end
	--GetModifier(context.Source.WeaponAttackRollAbility)
	--DealDamage(MainMeleeWeapon, MainMeleeWeaponDamageType)
    return ConditionResult(true)
end

--Fighter

function ExactingStrikeFX()
    return (SpellId('Target_ExactingStrike') or SpellId('Projectile_ExactingStrike')) and HasStatus('MAP_2_ATTACKS',SELF)
end